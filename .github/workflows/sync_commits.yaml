name: ‚ôªÔ∏è Sync Upstream ‚ôªÔ∏è
#MAX_RUNTIME: 02 Minutes */10 * * * * 

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */1 * * *" #@every 1hrs
#------------------------------------------------------------------------------------#
jobs:
    sync-upstream:
      name: Sync Upstream
      runs-on: ubuntu-latest
      permissions: 
        contents: write

      steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: main
          fetch-depth: 1
          filter: "blob:none"

      - name: Setup Env
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          ##Install coreutils
          sudo apt-get update -y -qq && sudo apt-get install curl coreutils dos2unix file findutils gawk git jq moreutils rsync tar xz-utils util-linux wget zip -y -qq
          ##Install Addons
          #https://github.com/pkgforge/devscripts/blob/main/Linux/install_bins_curl.sh
          #bash <(curl -qfsSL "https://raw.githubusercontent.com/pkgforge/devscripts/refs/heads/main/Linux/install_bins_curl.sh")
          ##Create Output Dir
          mkdir -p "${GITHUB_WORKSPACE}/main"
        continue-on-error: true

      - name: Sync "${GITHUB_WORKSPACE}/main" <-- "(https://github.com/ivan-hc/AM)"
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          ##Main
          pushd "$(mktemp -d)" &>/dev/null && git clone --filter="blob:none" --quiet "https://github.com/ivan-hc/AM" && cd "./AM"
          LATEST_COMMIT="$(git rev-parse HEAD | tr -d "[:space:]")" && export LATEST_COMMIT="${LATEST_COMMIT}"
          LATEST_COMMI_M="$(git log -1 --pretty="%B" | head -n 1)" && export LATEST_COMMIT="${LATEST_COMMIT}"
          echo "LATEST_COMMI_M=${LATEST_COMMI_M}" >> "${GITHUB_ENV}"
          PREV_COMMIT="$(cat "${GITHUB_WORKSPACE}/main/.github/LATEST.txt" 2>/dev/null)" && export PREV_COMMIT="${PREV_COMMIT}"
          if [ "${LATEST_COMMIT}" != "${PREV_COMMIT}" ]; then
            #Sync Repo
             echo "${LATEST_COMMIT}" > "${GITHUB_WORKSPACE}/main/.github/LATEST.txt"
             sed '/^$/d' -i "${GITHUB_WORKSPACE}/main/.github/LATEST.txt"
             rm -rfv "./.git/" "./.githooks/" "./.github/" 2>/dev/null
             rsync -achLv --remove-source-files --exclude="./.git/**" --exclude="./.github/**" "./" "${GITHUB_WORKSPACE}/main/"
          fi
          popd &>/dev/null
        continue-on-error: true

      - name: Remove Reference
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          ##ivan-hc/AM --> pkgforge-community/AM-HF-SYNC
          find "${GITHUB_WORKSPACE}/main" -name ".git*" -prune -o -type f -exec sed 's#ivan-hc/AM#pkgforge-community/AM-HF-SYNC#g' -i "{}" + 2>/dev/null
          find "${GITHUB_WORKSPACE}/main/modules" -name ".git*" -prune -o -type f -exec sed 's#\^ivan-hc#\^Azathothas#g' -i "{}" + 2>/dev/null
          sed 's#\^ivan-hc#\^Azathothas#g' -i "${GITHUB_WORKSPACE}/main/APP-MANAGER"
          find "${GITHUB_WORKSPACE}/main/modules" -name ".git*" -prune -o -type f -exec sed 's#\TORSOCKS="1"#unset TORSOCKS#g' -i "{}" + 2>/dev/null
          sed 's#\TORSOCKS="1"#unset TORSOCKS#g' -i "${GITHUB_WORKSPACE}/main/APP-MANAGER"
          ##api.github.com --> api.gh.pkgforge.dev
          find "${GITHUB_WORKSPACE}/main" -name ".git*" -prune -o -type f -exec sed 's#api.github.com#api.gh.pkgforge.dev#g' -i "{}" + 2>/dev/null
          ###curl -$ARGS --> curl -A "${USER_AGENT}" -$ARGS
          #find "${GITHUB_WORKSPACE}/main" -name ".git*" -prune -o -type f -exec sed '/USER_AGENT/!s#curl -#curl -A "${USER_AGENT}" -#g' -i "{}" + 2>/dev/null
          ###wget "$ARGS --> wget -U "${USER_AGENT}" "$ARGS
          #find "${GITHUB_WORKSPACE}/main" -name ".git*" -prune -o -type f -exec sed '/USER_AGENT/!s#wget "#wget -U "${USER_AGENT}" "#g' -i "{}" + 2>/dev/null
          ##set -e --> set +e
          find "${GITHUB_WORKSPACE}/main" -name ".git*" -prune -o -type f -exec sed 's#set -e#set +e#g' -i "{}" + 2>/dev/null
          ###set -u --> set +u
          #find "${GITHUB_WORKSPACE}/main" -name ".git*" -prune -o -type f -exec sed 's#set -u#set +u#g' -i "{}" + 2>/dev/null
          ##set -u --> set -ux
          find "${GITHUB_WORKSPACE}/main/programs" -name ".git*" -prune -o -type f -exec sed '/set -ux/!s#set -u#set -ux#g' -i "{}" + 2>/dev/null
        continue-on-error: true
          
      - name: Update/Generate BUILD_LIST
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          ##AM
          pushd "$(mktemp -d)" &>/dev/null && git clone --filter="blob:none" --depth="1" --no-checkout "https://github.com/ivan-hc/AM" && cd "./AM"
          git sparse-checkout set "" && git checkout
          unset AM_REPO_LOCAL ; AM_REPO_LOCAL="$(realpath .)" && export AM_REPO_LOCAL="${AM_REPO_LOCAL}"
          if [ ! -d "${AM_REPO_LOCAL}" ] || [ $(du -s "${AM_REPO_LOCAL}" | cut -f1) -le 100 ]; then
            echo -e "\n[X] FATAL: Failed to clone AM Repo\n"
           exit 1
          fi
          popd &>/dev/null
          ##HF
          pushd "$(mktemp -d)" &>/dev/null && git clone --filter="blob:none" --depth="1" --no-checkout "https://huggingface.co/datasets/pkgforge/AMcache" && cd "./AMcache"
          git sparse-checkout set "" && git checkout
          unset HF_REPO_LOCAL ; HF_REPO_LOCAL="$(realpath .)" && export HF_REPO_LOCAL="${HF_REPO_LOCAL}"
          if [ ! -d "${HF_REPO_LOCAL}" ] || [ $(du -s "${HF_REPO_LOCAL}" | cut -f1) -le 100 ]; then
            echo -e "\n[X] FATAL: Failed to clone HF Repo\n"
           exit 1
          fi
          popd &>/dev/null
          ##Generate
          pushd "$(mktemp -d)" &>/dev/null
           readarray -t "AM_PKGS_X86" < <(git -C "${AM_REPO_LOCAL}" ls-tree --name-only 'HEAD' -- "programs/x86_64/" | xargs -I "{}" basename "{}" | sort -u | sed -E 's/^[[:space:]]+|[[:space:]]+$//g' | grep -Eiv '\.(git|md|txt)')
           if [[ -n "${AM_PKGS_X86[*]}" && "${#AM_PKGS_X86[@]}" -gt 2000 ]]; then
             printf "%s\n" "${AM_PKGS_X86[@]}" | sort -u -o "${GITHUB_WORKSPACE}/main/.github/PKG_LIST_x86_64-Linux.txt"
           fi
           #readarray -t "AM_PREBUILTS" < <(git -C "${HF_REPO_LOCAL}" ls-tree --name-only 'HEAD' | xargs -I "{}" basename "{}" | sort -u | sed -E 's/^[[:space:]]+|[[:space:]]+$//g' | grep -Eiv '\.(git|md|txt)')
           readarray -t "AM_PREBUILTS" < <(curl -qfsSL "https://meta.pkgforge.dev/external/am/x86_64-Linux.json" | jq -r '.[] | .pkg' | sort -u | sed -E 's/^[[:space:]]+|[[:space:]]+$//g')
           if [[ -n "${AM_PREBUILTS[*]}" && "${#AM_PREBUILTS[@]}" -gt 100 ]]; then
             printf "%s\n" "${AM_PREBUILTS[@]}" | sort -u -o "${GITHUB_WORKSPACE}/main/.github/CACHE_LIST.txt"
           fi
           if [[ "${#AM_PKGS_X86[@]}" -gt 2000 && "${#AM_PREBUILTS[@]}" -gt 100 ]]; then
             comm -23 <(printf "%s\n" "${AM_PKGS_X86[@]}" | sort) <(printf "%s\n" "${AM_PREBUILTS[@]}" | sort) | sort -u -o "./BUILD_LIST.tmp"
             if [[ "$(wc -l < "./BUILD_LIST.tmp" | tr -cd '[:digit:]')" -gt 255 ]]; then
               shuf -n 256 "./BUILD_LIST.tmp" | sort -u -o "${GITHUB_WORKSPACE}/main/.github/BUILD_LIST_x86_64-Linux.txt"
             elif [[ "$(wc -l < "./BUILD_LIST.tmp" | tr -cd '[:digit:]')" -lt 10 ]]; then
               shuf -n 240 "${GITHUB_WORKSPACE}/main/.github/PKG_LIST_x86_64-Linux.txt" | sort -u >> "${GITHUB_WORKSPACE}/main/.github/BUILD_LIST_x86_64-Linux.txt"
               sort -u "${GITHUB_WORKSPACE}/main/.github/BUILD_LIST_x86_64-Linux.txt" -o "${GITHUB_WORKSPACE}/main/.github/BUILD_LIST_x86_64-Linux.txt"
             fi
           fi
           sed -E 's/^[[:space:]]+|[[:space:]]+$//g' -i "${GITHUB_WORKSPACE}/main/.github/CACHE_LIST.txt"
           sed -E 's/^[[:space:]]+|[[:space:]]+$//g' -i "${GITHUB_WORKSPACE}/main/.github/PKG_LIST_x86_64-Linux.txt"
           sed -E 's/^[[:space:]]+|[[:space:]]+$//g' -i "${GITHUB_WORKSPACE}/main/.github/BUILD_LIST_x86_64-Linux.txt"
           echo -e "\n[+] Total Packages: $(wc -l < ${GITHUB_WORKSPACE}/main/.github/PKG_LIST_x86_64-Linux.txt)"
           echo -e "[+] Total Prebuilts: $(wc -l < ${GITHUB_WORKSPACE}/main/.github/CACHE_LIST.txt)"
           echo -e "[+] Total Build Queue: $(wc -l < ${GITHUB_WORKSPACE}/main/.github/BUILD_LIST_x86_64-Linux.txt)\n"
          popd &>/dev/null
        continue-on-error: true

      - name: Get DateTime
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          NEPALI_TIME="$(TZ='Asia/Kathmandu' date +'%Y-%m-%d (%I:%M:%S %p)')"
          echo "NEPALI_TIME=${NEPALI_TIME}" >> "${GITHUB_ENV}"
        continue-on-error: true
        
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: ./main
          commit_user_name: Azathothas
          commit_user_email: AjamX101@gmail.com
          commit_message: "‚ôªÔ∏è Synced AM üì¶ <-- [${{ env.LATEST_COMMI_M }}] ‚åö"
