name: ⏱️ Schedule Matrix Builds 📈
concurrency:
  group: "${{ github.workflow }}-${{ github.ref }}"
  cancel-in-progress: true

on:
  workflow_dispatch:
  schedule:
    - cron: "0 */4 * * *" #every 4hrs
    #- cron: "30 18 * * Mon,Wed,Sat" # 06:30 PM UTC (12:15 AM NPT Mrng)
    ##- cron: "30 18 * * 1,3,6" # 06:30 PM UTC (12:15 AM NPT Mrng)
jobs:
  pre-trigger-build:
    runs-on: ubuntu-latest
    permissions:
      actions: write
      contents: write
      statuses: write
    outputs:
      build_list: ${{ steps.set-inputs.outputs.build_list }}
    steps:
      - name: Sync Upstream
        timeout-minutes: 5
        env:
          GH_TOKEN: "${{ github.token }}"
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          ##Trigger  
          gh workflow run "sync_commits.yaml" \
           --repo "${GITHUB_REPOSITORY}" \
           --ref "${GITHUB_REF}"
          sleep 5
          ##Get ID
          RUN_ID=""
          while [[ -z "${RUN_ID}" ]]; do
            RUN_ID="$(gh run list --repo "${GITHUB_REPOSITORY}" --workflow "sync_commits.yaml" --json 'databaseId' --jq '.[0].databaseId' 2>/dev/null | tr -d '[:space:]')"
            sleep 5
          done
          gh run list --repo "${GITHUB_REPOSITORY}" --workflow "sync_commits.yaml"
          ##Wait
          while true; do
           STATUS="$(gh run view "${RUN_ID}" --repo "${GITHUB_REPOSITORY}" --json status --jq '.status' | tr -d '[:space:]')"
             if [[ "$STATUS" == "completed" ]]; then
               break
             fi
             sleep 10
          done
          gh run list --repo "${GITHUB_REPOSITORY}" --workflow "sync_commits.yaml"
        continue-on-error: false

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          path: main
          fetch-depth: 1
          filter: "blob:none"

      - name: Setup Env
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          ##CoreUtils
          sudo apt update -y
          sudo apt install bc coreutils curl dos2unix fdupes jq moreutils wget -y
          sudo apt-get install apt-transport-https apt-utils ca-certificates coreutils dos2unix gnupg2 jq moreutils p7zip-full rename rsync software-properties-common texinfo tmux torsocks util-linux wget zsync -y 2>/dev/null ; sudo apt-get update -y 2>/dev/null
          #-------------#
          ##Host
          HOST_TRIPLET="$(uname -m)-$(uname -s)"
          echo "HOST_TRIPLET=${HOST_TRIPLET}" >> "${GITHUB_ENV}"
          #-------------#
          ##Repo
          PKG_REPO="${GITHUB_REPOSITORY}"
          echo "PKG_REPO=${PKG_REPO#*/}" >> "${GITHUB_ENV}"
          #-------------#
          ##tmp
          SYSTMP="$(dirname $(mktemp -u))" && export SYSTMP="${SYSTMP}"
          echo "SYSTMP=${SYSTMP}" >> "${GITHUB_ENV}"
          #-------------#
          mkdir -p "${HOME}/bin"
          sudo apt update -y
          sudo apt install dos2unix -y
          ##User-Agent
          USER_AGENT="$(curl -qfsSL 'https://pub.ajam.dev/repos/Azathothas/Wordlists/Misc/User-Agents/ua_chrome_macos_latest.txt')" && export USER_AGENT="${USER_AGENT}"
          echo "USER_AGENT=${USER_AGENT}" >> "${GITHUB_ENV}"
        continue-on-error: true
              
      - name: Get & Set Inputs
        id: set-inputs
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          ##Get Data
          mkdir -pv "${SYSTMP}/AM"
          pushd "$(mktemp -d)" &>/dev/null
          #curl -qfsSL "https://raw.githubusercontent.com/pkgforge-community/AM-HF-SYNC/refs/heads/main/programs/aarch64-apps" | cut -d ':' -f1 | tr -cd '[:alnum:]-_\n' | jq -R '{host: "aarch64-Linux", pkg: .}' > "${SYSTMP}/AM/aarch64-Linux.json"
          #curl -qfsSL "https://raw.githubusercontent.com/pkgforge-community/AM-HF-SYNC/refs/heads/main/programs/x86_64-apps" | cut -d ':' -f1 | tr -cd '[:alnum:]-_\n' | jq -R '{host: "x86_64-Linux", pkg: .}' > "${SYSTMP}/AM/x86_64-Linux.json"
          #git clone --depth="1" --filter="blob:none" --quiet "https://github.com/ivan-hc/AM"
          #find "./AM/programs/x86_64/" -type f -exec basename "{}" 2>/dev/null \; | sort -u | sed -E 's/^[[:space:]]+|[[:space:]]+$//g' | jq -R '{host: "x86_64-Linux", pkg: .}' > "${SYSTMP}/AM/x86_64-Linux.json"
          curl -qfsSL "https://raw.githubusercontent.com/pkgforge-community/AM-HF-SYNC/refs/heads/main/.github/BUILD_LIST_x86_64-Linux.txt" | head -n 256 | sort -u | sed -E 's/^[[:space:]]+|[[:space:]]+$//g' | jq -R '{host: "x86_64-Linux", pkg: .}' > "${SYSTMP}/AM/x86_64-Linux.json"
          cat "${SYSTMP}/AM/x86_64-Linux.json" | jq -s 'sort_by(.pkg)' > "${SYSTMP}/AM/LIST.json"
          ##Set Input (256 builds)
          BUILD_LIST="$(jq -c '[.[]] | .[:256]' "${SYSTMP}/AM/LIST.json")"
          jq -r '.[] | .pkg' "${SYSTMP}/AM/LIST.json" | sort -u >> "${GITHUB_WORKSPACE}/main/.github/QUEUE_LIST_x86_64-Linux.txt"
          sort -u "${GITHUB_WORKSPACE}/main/.github/QUEUE_LIST_x86_64-Linux.txt" -o "${GITHUB_WORKSPACE}/main/.github/QUEUE_LIST_x86_64-Linux.txt"
          sed -E 's/^[[:space:]]+|[[:space:]]+$//g' -i "${GITHUB_WORKSPACE}/main/.github/QUEUE_LIST_x86_64-Linux.txt"
          ##Validate Input
          if ! echo "${BUILD_LIST}" | jq -e 'type == "array" and length > 0' >/dev/null; then
             echo -e "\n[-] Input Json is likely Invalid\n"
             echo "${BUILD_LIST}" | jq .
            exit 1
          else
             ESCAPED_BUILD_LIST=$(echo "$BUILD_LIST" | jq -c .)
             echo "build_list=${ESCAPED_BUILD_LIST}" >> "${GITHUB_OUTPUT}"
          fi
          popd &>/dev/null
        continue-on-error: false

      - name: Sanity Check Input JSON
        run: |
          echo '${{ steps.set-inputs.outputs.build_list }}' | jq .
        continue-on-error: true

      - name: Get DateTime
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          NEPALI_TIME="$(TZ='Asia/Kathmandu' date +'%Y-%m-%d (%I:%M:%S %p)')"
          echo "NEPALI_TIME=${NEPALI_TIME}" >> "${GITHUB_ENV}"
        continue-on-error: true

      - name: Pull & Push
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          cd "${GITHUB_WORKSPACE}/main"
          echo "GIT_TERMINAL_PROMPT=0" >> "${GITHUB_ENV}"
          echo "GIT_ASKPASS=/bin/echo" >> "${GITHUB_ENV}"
          git config --global "user.email" "AjamX101@gmail.com"
          git config --global "user.name" "Azathothas"
          git pull origin main --no-edit 2>/dev/null
          git pull origin main --ff-only ; git merge --no-ff -m "Merge & Sync"
        continue-on-error: true
      - uses: stefanzweifel/git-auto-commit-action@v5
        with:
          repository: ./main
          commit_user_name: Azathothas
          commit_user_email: AjamX101@gmail.com
          commit_message: "♻️ Updated QueList 📦 <-- [${{ env.NEPALI_TIME }}] ⌚"

  trigger-build:
    needs: [pre-trigger-build]
    runs-on: ubuntu-latest
    timeout-minutes: 250
    permissions:
      actions: write
      contents: read
      statuses: write
    strategy:
      fail-fast: false
      max-parallel: 10
      matrix:
        package: ${{ fromJSON(needs.pre-trigger-build.outputs.build_list) }}
    steps:
      - name: Current Package
        run: |
          echo '${{ toJSON(matrix.package) }}' | jq -r '
            "Host: \(.host)",
            "Package: \(.pkg)"
          '
        continue-on-error: true

      - name: Trigger Matrix Builds
        if: ${{ toJson(matrix.package) != '{}' }}
        env:
          GH_TOKEN: "${{ github.token }}"
        run: |
          ##presets
          set +x ; set +e
          #-------------#        
          gh workflow run "matrix_builds.yaml" \
            --repo "${GITHUB_REPOSITORY}" \
            --ref "${GITHUB_REF}" \
            -f host="x86_64-Linux" \
            -f pkg-name="${{ matrix.package.pkg }}" \
            -f debug="false" \
            -f logs="true"
        continue-on-error: false