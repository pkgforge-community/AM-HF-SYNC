name: 🧰🛠️ Build Package 📦📀

permissions:
  contents: write

on:
  workflow_dispatch:
    inputs:

      host:
        description: Host (Arch+OS) [ALL ==> Run on All Hosts]
        type: choice
        options:
          #- "ALL"
          #- "aarch64-Linux"
          - "x86_64-Linux"

      pkg-name:
        description: Name of the Package
        required: true

      debug:
        description: Debug Mode (Verbose with set -x) [Default ==> False]
        type: choice
        options:
          - "false"
          - "true"

      logs:
        description: Keep Logs? (Preserves Working Dir) [Default ==> True]
        type: choice
        options:
          - "true"
          - "false"

jobs:
  preprocess:
    runs-on: ubuntu-latest
    outputs:
      runner_matrix: ${{ steps.generate-matrix.outputs.runner_matrix }}
    steps:
      - name: Presetup
        id: generate-matrix
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          echo '[' > "./MATRIX.json.tmp"
           if [[ "${{ github.event.inputs.host }}" == "ALL" ]]; then
             echo '{"host": "aarch64-Linux", "runner": "ubuntu-24.04-arm", "pkg-name": "${{ inputs.pkg-name }}"},' >> "./MATRIX.json.tmp"
             echo '{"host": "x86_64-Linux", "runner": "ubuntu-latest", "pkg-name": "${{ inputs.pkg-name }}"}' >> "./MATRIX.json.tmp"
           elif [[ "${{ github.event.inputs.host }}" == "aarch64-Linux" ]]; then
             echo '{"host": "aarch64-Linux", "runner": "ubuntu-24.04-arm", "pkg-name": "${{ inputs.pkg-name }}"}' >> "./MATRIX.json.tmp"
           elif [[ "${{ github.event.inputs.host }}" == "x86_64-Linux" ]]; then
             echo '{"host": "x86_64-Linux", "runner": "ubuntu-latest", "pkg-name": "${{ inputs.pkg-name }}"}' >> "./MATRIX.json.tmp"
           fi
          echo ']' >> "./MATRIX.json.tmp"
          jq 'unique_by(.runner)' "./MATRIX.json.tmp" | jq . > "./MATRIX.json"
          ESCAPED_MATRIX="$(cat "./MATRIX.json" | jq -c .)"
          echo "runner_matrix=${ESCAPED_MATRIX}" >> "${GITHUB_OUTPUT}"
        continue-on-error: false

      - name: Sanity Check Input JSON
        run: |
          echo '${{ steps.generate-matrix.outputs.runner_matrix }}' | jq .
        continue-on-error: true

  build:
    needs: [preprocess]
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.preprocess.outputs.runner_matrix) }}
    name: "${{ matrix.package.host }} ==> (${{ matrix.package.pkg-name }})"
    runs-on: "${{ matrix.package.runner }}"
    timeout-minutes: 15
    permissions:
      attestations: write
      contents: write
      id-token: write
      packages: write
    steps:
      - name: Exit if not called
        env:
          GH_TOKEN: "${{ github.token }}"
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          if [[ "$(uname -m | tr -d '[:space:]')" == "aarch64" ]]; then
            if [[ "${{ github.event.inputs.host }}" != "ALL" ]] && [[ "${{ github.event.inputs.host }}" != "aarch64-Linux" ]]; then
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
            fi
          elif [[ "$(uname -m | tr -d '[:space:]')" == "x86_64" ]]; then
            if [[ "${{ github.event.inputs.host }}" != "ALL" ]] && [[ "${{ github.event.inputs.host }}" != "x86_64-Linux" ]]; then
              echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
            fi
          fi
        continue-on-error: false

      - name: Validate Required Secrets [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
          #RO_GHTOKEN: ${{ secrets.RO_GHTOKEN }}
          RO_GHTOKEN: ${{ github.token }}
          #RO_GLTOKEN: ${{ secrets.RO_GLTOKEN }}
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          # Check if any of the required secrets are missing
          if [ -z "${RO_GHTOKEN##*[[:space:]]}" ] || [ -z "${HF_TOKEN##*[[:space:]]}" ]; then
            echo "::error::One or more required secrets are missing:"
            [ -z "${RO_GHTOKEN##*[[:space:]]}" ] && echo "- RO_GHTOKEN is missing"
            [ -z "${HF_TOKEN##*[[:space:]]}" ] && echo "- HF_TOKEN is missing"
            exit 1
          fi
        continue-on-error: false

      - name: Parse Input [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          export HOST_TRIPLET="$(uname -m)-$(uname -s)"
          ##Debug   
           if [ "${{ github.event.inputs.debug }}" == "true" ] ; then
             export DEBUG="1"
           else
             export DEBUG="0"
           fi
           echo "DEBUG=${DEBUG}" >> "${GITHUB_ENV}"
          ##Logs
           if [ "${{ github.event.inputs.logs }}" == "false" ] ; then
             export KEEP_LOGS="NO"
           else
             export KEEP_LOGS="YES"
             export GITHUB_TEST_BUILD="YES"
           fi
           echo "KEEP_LOGS=${KEEP_LOGS}" >> "${GITHUB_ENV}"
           echo "GITHUB_TEST_BUILD=${GITHUB_TEST_BUILD}" >> "${GITHUB_ENV}"
           ##Package
           sudo curl -qfsSL "https://bin.pkgforge.dev/${HOST_TRIPLET}/yq" -o "/usr/local/bin/yq" && \
             sudo chmod 'a+x' "/usr/local/bin/yq" && command -v yq >/dev/null || exit 1
           AM_PKG_NAME="$(echo "${{ github.event.inputs.pkg-name }}" | tr -d '[:space:]')"
           PKG_SCRIPT_URL="https://github.com/ivan-hc/AM/raw/main/programs/$(uname -m)/${AM_PKG_NAME}"
           pushd "$(mktemp -d)" >/dev/null 2>&1
             PKG_STATUS="$(curl -X "HEAD" -qfsSL "${PKG_SCRIPT_URL}" -I | sed -n 's/^[[:space:]]*HTTP\/[0-9.]*[[:space:]]\+\([0-9]\+\).*/\1/p' | tail -n1 | tr -d '[:space:]')"
             if echo "${PKG_STATUS}" | grep -qiv '200$'; then
               echo -e "\n[✗] FATAL: Failed to Fetch ${AM_PKG_NAME} <== ${PKG_SCRIPT_URL}\n"
               echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
              exit 1
             else
               export AM_PKG_NAME
               echo "AM_PKG_NAME=${AM_PKG_NAME}" >> "${GITHUB_ENV}"
             fi
           popd >/dev/null 2>&1
           echo -e "\n==> ${PKG_SCRIPT_URL}\n"
        continue-on-error: false

      - name: Create Metadata Tag [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        env:
          GH_TOKEN: ${{ github.token }}
          GITHUB_TOKEN: ${{ github.token }}      
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          METADATA_TAG="METADATA-$(date --utc +'%Y_%m_%d')"
          export METADATA_TAG="$(echo "${METADATA_TAG}" | tr -d '[:space:]')"
          echo "METADATA_TAG=${METADATA_TAG}" >> "${GITHUB_ENV}"
          echo "GH_PAGER=" >> "${GITHUB_ENV}"
          gh config set prompt disabled
          gh release create "${METADATA_TAG}" --repo "${GITHUB_REPOSITORY}" --title "${METADATA_TAG}" --prerelease
          sleep 3 ; gh release view "${METADATA_TAG}" --repo "${GITHUB_REPOSITORY}"
          METADATA_TAG_URL="https://github.com/${GITHUB_REPOSITORY}/releases/tag/${METADATA_TAG}"
          echo METADATA_TAG_URL="${METADATA_TAG_URL}" >> "${GITHUB_ENV}"
        continue-on-error: true

      - name: Setup Env [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          ##presets
          set +x ; set +e
          #-------------#
          ##CoreUtils
          export DEBIAN_FRONTEND="noninteractive"
          echo "DEBIAN_FRONTEND=${DEBIAN_FRONTEND}" >> "${GITHUB_ENV}"
          sudo apt update -y -qq
          #https://github.com/ilikenwf/apt-fast?tab=readme-ov-file#quick-install
          bash -c "$(curl -qfsSL 'https://raw.githubusercontent.com/ilikenwf/apt-fast/master/quick-install.sh')"
          sudo apt-fast install apt-transport-https apt-utils bc ca-certificates coreutils curl dos2unix fdupes git-lfs gnupg2 \
          jq moreutils p7zip-full rename rsync software-properties-common texinfo tmux torsocks util-linux wget zsync -y -qq 2>/dev/null
          sudo apt-fast update -y -qq 2>/dev/null
          ##tmp
          SYSTMP="$(dirname $(mktemp -u))" && export SYSTMP="${SYSTMP}"
          #GH ENV
          echo "SYSTMP=${SYSTMP}" >> "${GITHUB_ENV}"
          echo "GHA_MODE=MATRIX" >> "${GITHUB_ENV}"
          echo "GIT_TERMINAL_PROMPT=0" >> "${GITHUB_ENV}"
          echo "GIT_ASKPASS=/bin/echo" >> "${GITHUB_ENV}"
          export METADATA_DIR="/tmp/PKG_METADATA"
          echo "METADATA_DIR=${METADATA_DIR}" >> "${GITHUB_ENV}"
          mkdir -pv "${METADATA_DIR}"
          git config --global "credential.helper" store
          git config --global "user.email" "AjamX101@gmail.com"
          git config --global "user.name" "Azathothas"
          ##User-Agent
          USER_AGENT="$(curl -qfsSL 'https://pub.ajam.dev/repos/Azathothas/Wordlists/Misc/User-Agents/ua_chrome_macos_latest.txt')" && export USER_AGENT="${USER_AGENT}"
          echo "USER_AGENT=${USER_AGENT}" >> "${GITHUB_ENV}"
          ##Wget
          echo 'progress = dot:giga' | sudo tee -a "/etc/wgetrc"
          echo 'progress = dot:giga' | tee -a "${HOME}/.wgetrc"
        continue-on-error: true

      - name: Disable apparmor_restrict_unprivileged_userns
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          #presets
          set +x ; set +e
          #-------------#
          echo "kernel.apparmor_restrict_unprivileged_userns=0" | sudo tee "/etc/sysctl.d/98-apparmor-unuserns.conf"
          echo "0" | sudo tee "/proc/sys/kernel/apparmor_restrict_unprivileged_userns"
          sudo service procps restart
          sudo sysctl -p "/etc/sysctl.conf"
        continue-on-error: true

      - name: Install AM
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          #presets
          set +x ; set +e
          #-------------#
          #https://github.com/ivan-hc/AM/blob/main/AM-INSTALLER#L13
          sudo apt-fast update -y -qq
          sudo apt-fast install curl torsocks wget zsync -y -qq
          yes '1' | bash <(curl -qfsSL "https://raw.githubusercontent.com/pkgforge-community/AM-HF-SYNC/main/AM-INSTALLER")
          if ! command -v am &>/dev/null; then
            echo -e "[-] Failed to find am\n"
            echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
           exit 1
          else
            #timeout -k 10s 60s bash -c 'am -l --appimages | cat -'
            timeout -k 10s 60s bash -c 'am --version'
          fi
        continue-on-error: false

      - name: Install Addons
        run: |
          #presets
          set +x ; set +e
          #-------------#
          #export PARALLEL=1
          #bash <(curl -qfsSL "https://raw.githubusercontent.com/pkgforge/devscripts/refs/heads/main/Linux/install_bins_curl.sh")
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/7z" -o "/usr/bin/7z" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/7z" -o "/usr/local/bin/7z" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/ansi2txt" -o "/usr/local/bin/ansi2txt" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/aria2c" -o "/usr/local/bin/aria2c" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/askalono" -o "/usr/local/bin/askalono" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/Baseutils/libarchive/bsdtar" -o "/usr/local/bin/bsdtar" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/b3sum" -o "/usr/local/bin/b3sum" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/eget" -o "/usr/local/bin/eget" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/huggingface-cli" -o "/usr/local/bin/huggingface-cli" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/jq" -o "/usr/local/bin/jq" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/ouch" -o "/usr/local/bin/ouch" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/rsync" -o "/usr/local/bin/rsync" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/trufflehog" -o "/usr/local/bin/trufflehog" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/xq" -o "/usr/local/bin/xq" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/Baseutils/xz/xz" -o "/usr/local/bin/xz" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/yq" -o "/usr/local/bin/yq" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/Baseutils/zstd/zstd" -o "/usr/bin/zstd" &
          sudo curl -qfsSL "https://bin.pkgforge.dev/$(uname -m)-$(uname -s)/Baseutils/zstd/zstd" -o "/usr/local/bin/zstd" &
          wait ; echo
          sudo chmod -v 'a+x' \
          "/usr/bin/7z" \
          "/usr/local/bin/7z" \
          "/usr/local/bin/ansi2txt" \
          "/usr/local/bin/aria2c" \
          "/usr/local/bin/askalono" \
          "/usr/local/bin/bsdtar" \
          "/usr/local/bin/b3sum" \
          "/usr/local/bin/eget" \
          "/usr/local/bin/huggingface-cli" \
          "/usr/local/bin/jq" \
          "/usr/local/bin/ouch" \
          "/usr/local/bin/rsync" \
          "/usr/local/bin/trufflehog" \
          "/usr/local/bin/xq" \
          "/usr/local/bin/xz" \
          "/usr/local/bin/yq" \
          "/usr/bin/zstd" \
          "/usr/local/bin/zstd"
        continue-on-error: true

      - name: Setup HF [https://huggingface.co/datasets/pkgforge/AMcache]
        if: env.CONTINUE_GHRUN != 'FALSE'
        env:
          HF_TOKEN: ${{ secrets.HF_TOKEN }}
        run: |
          #presets
          set +x ; set +e
          #-------------#
          if ! command -v huggingface-cli &> /dev/null; then
            echo -e "[-] Failed to find huggingface-cli\n"
            echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
           exit 1 
          fi
          if [[ -z "${HF_TOKEN+x}" ]]; then
            echo -e "\n[-] FATAL: Failed to Find HF Token (\${HF_TOKEN}\n"
            echo "CONTINUE_GHRUN=FALSE" >> "${GITHUB_ENV}"
           exit 1
          else          
            huggingface-cli login --token "${HF_TOKEN}" --add-to-git-credential
          fi
        continue-on-error: false

      - name: BUILD (${{ github.event.inputs.pkg-name }}) [${{ matrix.package.host }}<==>${{ matrix.package.runner }}]
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          ##Main
          pushd "$(mktemp -d)" >/dev/null 2>&1
           curl -qfsSL "https://raw.githubusercontent.com/pkgforge-community/AM-HF-SYNC/refs/heads/main/.github/scripts/builder.sh" -o "${SYSTMP}/BUILDER.sh"
           dos2unix --quiet "${SYSTMP}/BUILDER.sh" ; chmod +xwr "${SYSTMP}/BUILDER.sh"
           ##Run with STDOUT + LOGS
            export DEBUG="${DEBUG}"
            export KEEP_LOGS="${KEEP_LOGS}"
            export AM_PKG_NAME="${AM_PKG_NAME}"
            export GITHUB_TEST_BUILD="${GITHUB_TEST_BUILD}"
            bash "${SYSTMP}/BUILDER.sh" | tee "${SYSTMP}/BUILD.log" 2>&1
           ##Purge Tokens (in case set -x & gh didn't redact)
           cat "${SYSTMP}/BUILD.log" | ansi2txt > "${SYSTMP}/BUILD.gh.log.txt"
           sed -i '/.*github_pat.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*ghp_.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*access_key_id.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*token.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*secret_access_key.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*token.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           sed -i '/.*cloudflarestorage.*/Id' "${SYSTMP}/BUILD.gh.log.txt" 2>/dev/null
           mv -fv "${SYSTMP}/BUILD.gh.log.txt" "${SYSTMP}/BUILD.log"
          popd >/dev/null 2>&1
        continue-on-error: true

    ##Logs & Artifacts
      - name: Get DateTime [${{ matrix.package.host }}<==>${{ matrix.package.runner }}] (${{ env.PKG_TYPE }})
        if: env.CONTINUE_GHRUN != 'FALSE'
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          UTC_TIME="$(TZ='UTC' date +'%Y_%m_%dT%I_%M_%S_%p')"
          echo "UTC_TIME=${UTC_TIME}" >> "${GITHUB_ENV}"
        continue-on-error: true

      - name: Upload (LOG) Artifacts [${{ matrix.package.host }}<==>${{ matrix.package.runner }}] (${{ env.PKG_TYPE }})
        if: env.CONTINUE_GHRUN != 'FALSE'
        uses: actions/upload-artifact@v4
        with:
            name: AM_${{ env.AM_PKG_NAME }}_${{ matrix.package.host }}
            path: |
              /tmp/BUILD.log
              /tmp/BUILD_ARTIFACTS.7z
            compression-level: 0 # no compression, [Default: 6 (GNU Gzip)]
            retention-days: 30
            overwrite: true
        continue-on-error: true     

      - name: Attest Build Provenance [${{ matrix.package.host }}<==>${{ matrix.package.runner }}] (${{ env.PKG_TYPE }})
        if: env.CONTINUE_GHRUN != 'FALSE'
        uses: actions/attest-build-provenance@v2.2.0
        with:
          subject-name: "build-logs-${{ env.AM_PKG_NAME }}-${{ env.UTC_TIME }}"
          subject-path: "/tmp/BUILD.log"
          show-summary: true
        continue-on-error: true

      - name: Check Build ==> [https://hf.co/datasets/pkgforge/AMcache/tree/${{ env.HF_PKGBRANCH_URI }}] (${{ env.PKG_TYPE }})
        if: env.CONTINUE_GHRUN != 'FALSE'
        env:
          GHCR_TOKEN: "${{ github.token }}"
          GITHUB_TOKEN: "${{ github.token }}"
        run: |
          #Presets
          set +x ; set +e
          #--------------#
          if [[ "${GHA_BUILD_FAILED}" == "YES" || "${BUILD_SUCCESSFUL}" == "NO" ]]; then
            echo -e "\n[-] FATAL: Failed to Successfully Build ${{ matrix.package.pkg-name }}"
           exit 1
          elif [[ "${PUSH_SUCCESSFUL}" != "YES" ]]; then
            echo -e "\n[-] FATAL: Failed to Push ==> https://huggingface.co/datasets/pkgforge/AMcache/tree/${{ env.HF_PKGBRANCH_URI }}"
           exit 1
          else
            echo -e "\n[+] Build: https://huggingface.co/datasets/pkgforge/AMcache/tree/${{ env.HF_PKGBRANCH_URI }}\n"
             if [[ -d "${METADATA_DIR}" ]] && [[ "$(du -s "${METADATA_DIR}" | cut -f1)" -gt 100 ]]; then
              pushd "${METADATA_DIR}" &>/dev/null &&\
                find "${METADATA_DIR}" -maxdepth 1 -type f -iname "*.json" -size +3c -print0 | xargs -0 -P "$(($(nproc)+1))" -I '{}' gh release upload "${METADATA_TAG}" --repo "${GITHUB_REPOSITORY}" '{}' --clobber
                sleep 5 ; gh release view "${METADATA_TAG}" --repo "${GITHUB_REPOSITORY}" 2>/dev/null || true
                echo -e "\n[+] Metadata: ${METADATA_TAG_URL}/${{ env.AM_PKG_NAME }}.json\n"
              popd &>/dev/null
             fi
          fi
        continue-on-error: false