#!/bin/sh

# AM INSTALL SCRIPT VERSION 3.5
set -ux
APP=gimp
SITE1="https://www.gimp.org" SITE2="ivan-hc/GIMP-appimage" SITE3="pkgforge-dev/GIMP-and-PhotoGIMP-AppImage"

# CREATE DIRECTORIES AND ADD REMOVER
[ -n "$APP" ] && mkdir -p "/opt/$APP/tmp" "/opt/$APP/icons" && cd "/opt/$APP/tmp" || exit 1
printf "#!/bin/sh\nset +e\nrm -f /usr/local/bin/$APP\nrm -R -f /opt/$APP" > ../remove
printf '\n%s' "rm -f /usr/local/share/applications/$APP-AM.desktop" >> ../remove
chmod a+x ../remove || exit 1

# DOWNLOAD AND PREPARE THE APP, $version is also used for updates
read -r -p "
 Choose which version of GIMP AppImage to use:

 1. Official AppImage

    Source: https://www.gimp.org

 2. Unofficial Archimage based on JuNest (Arch Linux)

    Source: https://github.com/ivan-hc/GIMP-appimage

 3. Unofficial AppImage that also includes PhotoGIMP.

    Source: https://github.com/pkgforge-dev/GIMP-and-PhotoGIMP-AppImage

 Which version you choose (type a number and press ENTER)?" response
RELEASE=""
if echo "$response" | grep -q "^1"; then
	RELEASE="$SITE1"
elif echo "$response" | grep -q "^2"; then
	RELEASE="$SITE2"
elif echo "$response" | grep -q "^3"; then
	RELEASE="$SITE3"
fi
[ -z "$RELEASE" ] && exit 0
[ "$RELEASE" != "$SITE1" ] && DOWLOAD_PAGE="https://api.gh.pkgforge.dev/repos/$RELEASE/releases/latest" || DOWLOAD_PAGE="https://www.gimp.org/downloads/"
version=$(curl -Ls "$DOWLOAD_PAGE" | tr '">< ' '\n' | grep -i 'download.*x86_64.*mage$' | head -1); if ! echo "$version" | grep -q "^http"; then version="https:$version"; fi
if [ -z "$version" ]; then
	printf "\n ðŸ’€ ERROR: it seems that upstream removed %b, please retry\n" "$RELEASE" && exit 1
else
	wget "$version" || exit 1
fi
cd ..
mv ./tmp/*mage ./"$APP"
# Keep this space in sync with other installation scripts
rm -R -f ./tmp || exit 1
echo "$version" > ./version
chmod a+x ./"$APP" || exit 1

# LINK TO PATH
ln -s "/opt/$APP/$APP" "/usr/local/bin/$APP"

# SCRIPT TO UPDATE THE PROGRAM
cat >> ./AM-updater << 'EOF'
#!/bin/sh
set -ux
APP=gimp
SITE="REPLACETHIS"
version0=$(cat "/opt/$APP/version")
version=$(curl -Ls "DOWLOAD_PAGE" | tr '">< ' '\n' | grep -i 'download.*x86_64.*mage$' | head -1); if ! echo "$version" | grep -q "^http"; then version="https:$version"; fi
[ -n "$version" ] || { echo "Error getting link"; exit 1; }
if command -v appimageupdatetool >/dev/null 2>&1; then
	cd "/opt/$APP" || exit 1
	appimageupdatetool -Or ./"$APP" && chmod a+x ./"$APP" && echo "$version" > ./version && exit 0
fi
if [ "$version" != "$version0" ]; then
	mkdir "/opt/$APP/tmp" && cd "/opt/$APP/tmp" || exit 1
	notify-send "A new version of $APP is available, please wait"
	wget "$version" || exit 1
	# Use tar fx ./*tar* here for example in this line in case a compressed file is downloaded.
	cd ..
	mv --backup=t ./tmp/*mage ./"$APP"
	chmod a+x ./"$APP" || exit 1
	echo "$version" > ./version
	rm -R -f ./*zs-old ./*.part ./tmp ./*~
	notify-send "$APP is updated!"
else
	echo "Update not needed!"
fi
EOF
chmod a+x ./AM-updater || exit 1
sed -i "s#REPLACETHIS#$RELEASE#g; s#DOWLOAD_PAGE#$DOWLOAD_PAGE#g" /opt/"$APP"/AM-updater

# LAUNCHER & ICON
./"$APP" --appimage-extract *.desktop 1>/dev/null && mv ./squashfs-root/*.desktop ./"$APP".desktop
./"$APP" --appimage-extract .DirIcon 1>/dev/null && mv ./squashfs-root/.DirIcon ./DirIcon
COUNT=0
while [ "$COUNT" -lt 10 ]; do # Tries to get the actual icon/desktop if it is a symlink to another symlink
	if [ -L ./"$APP".desktop ]; then
		LINKPATH="$(readlink ./"$APP".desktop | sed 's|^\./||' 2>/dev/null)"
		./"$APP" --appimage-extract "$LINKPATH" 1>/dev/null && mv ./squashfs-root/"$LINKPATH" ./"$APP".desktop
	fi
	if [ -L ./DirIcon ]; then
		LINKPATH="$(readlink ./DirIcon | sed 's|^\./||' 2>/dev/null)"
		./"$APP" --appimage-extract "$LINKPATH" 1>/dev/null && mv ./squashfs-root/"$LINKPATH" ./DirIcon
	fi
	[ ! -L ./"$APP".desktop ] && [ ! -L ./DirIcon ] && break
	COUNT=$((COUNT + 1))
done
sed -i "s#Exec=[^ ]*#Exec=$APP#g; s#Icon=.*#Icon=/opt/$APP/icons/$APP#g" ./"$APP".desktop
mv ./"$APP".desktop /usr/local/share/applications/"$APP"-AM.desktop && mv ./DirIcon ./icons/"$APP" 1>/dev/null
rm -R -f ./squashfs-root
